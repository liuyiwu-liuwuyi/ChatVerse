---
description: 
globs: 
alwaysApply: true
---

# LangChain中llm始终使用 langchain_deepseek 
使用示意为：


```
"""Utility functions for LLM operations."""
from typing import Optional, Union

from langchain.base_language import BaseLanguageModel
from langchain_deepseek import ChatDeepSeek
from pydantic import SecretStr

from config.langchain_deepseek_config import config

def create_llm(model_name: str = "deepseek-chat",
              temperature: float = 0.7,
              api_key: Optional[Union[str, SecretStr]] = None) -> BaseLanguageModel:
    """Create a language model instance.

    Args:
        model_name: The name of the model to use.
        temperature: The temperature for response generation.
        api_key: The DeepSeek API key.

    Returns:
        A language model instance.
    """
    model_config = get_model_config(model_name)
    return ChatDeepSeek(
        model=model_name,
        temperature=temperature,
        max_tokens=model_config.get("max_tokens", 1000),
        api_key=(SecretStr(api_key) if isinstance(api_key, str) else api_key) or config.api_key,
        base_url=config.base_url
    )

def get_model_config(model_name: str) -> dict:
    """Get the configuration for a specific model.

    Args:
        model_name: The name of the model.

    Returns:
        A dictionary containing model configuration.
    """
    configs = {
        "deepseek-chat": {
            "max_tokens": 4096,
            "default_temperature": 0.7,
            "supports_functions": True
        }
    }
    return configs.get(model_name, {})
```



.env
```
deepseek_api_key="sk-d3b36a6803f744b68fde7d78b372c43a"
```
deepseek_config.py
```
import os
from pathlib import Path
from dotenv import load_dotenv

# 自动查找项目根目录的.env文件
BASE_DIR = Path(__file__).parent.parent
_env_path = BASE_DIR / '.env'

if _env_path.exists():
    load_dotenv(_env_path)
else:
    import warnings
    warnings.warn(f"未找到环境变量文件: {_env_path}")

class Config:
    @property
    def api_key(self):
        return os.getenv('api_key')
    
    @property
    def base_url(self):
        return "https://api.deepseek.com/v1"
    
    @property
    def chat_model(self):
        return "deepseek-chat"

config = Config()
```

